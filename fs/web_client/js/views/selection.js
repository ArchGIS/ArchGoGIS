'use strict';

App.views.selection = new (Backbone.View.extend({
  "show": function(data) {
    App.views.addToMap(data.placemarks);

    $("#container").tabs();
    App.views.functions.setAccordion(".accordion");

    $("#get-all-radiocarbon").on("click", function() {
      var model = App.models.fn;
      var resolution = 20;
      var carbons = [];

      var query = {
        main: JSON.stringify({
          "mons:Monument": {"id": "NEED"},
          "knows:Knowledge": {"id": "*"},
          "carbon:Radiocarbon": {"id": "*", "select": "*"},
          "mons__knows": {},
          "knows__carbon": {},
        }),
      }

      function drawDiagram(data) {
        data.start = -6279.5;
        data.prob = [0.000000, 0.000000, 0.000000, 0.000000, 0.000003, 0.000003, 0.000003, 0.000003, 0.000002, 0.000004, 0.000016, 0.000108, 0.000316, 0.000760, 0.003314, 0.013511, 0.029786, 0.017023, 0.019316, 0.036469, 0.062989, 0.077072, 0.093847, 0.117872, 0.127369, 0.142807, 0.156228, 0.177183, 0.183686, 0.158054, 0.154601, 0.123578, 0.087764, 0.033597, 0.009492, 0.015721, 0.010198, 0.004037, 0.001886, 0.000922, 0.000313, 0.000004, 0.000002, 0.000002, 0.000003, 0.000002, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000001, 0.000002, 0.000002, 0.000002, 0.000003, 0.000003, 0.000003, 0.000005, 0.000006, 0.000006, 0.000007, 0.000006, 0.000008, 0.000008, 0.000009, 0.000011, 0.000013, 0.000014, 0.000017, 0.000020, 0.000031, 0.000031, 0.000029, 0.000031, 0.000040, 0.000067, 0.000267, 0.000403, 0.000185, 0.000495, 0.001835, 0.015323, 0.011635, 0.005403, 0.014298, 0.023835, 0.011508, 0.012585, 0.010419, 0.023362, 0.080475, 0.119113, 0.101176, 0.172042, 0.214899, 0.156915, 0.104850, 0.087166, 0.087410, 0.142837, 0.159083, 0.150151, 0.089317, 0.031908, 0.015820, 0.014078, 0.014125, 0.005709, 0.003415, 0.003344, 0.005205, 0.014851, 0.014799, 0.010908, 0.009177, 0.008611, 0.019033, 0.040703, 0.080558, 0.056370, 0.043247, 0.029629, 0.027137, 0.041760, 0.142510, 0.212423, 0.219714, 0.216995, 0.217319, 0.215020, 0.215484, 0.220964, 0.217777, 0.220862, 0.220294, 0.219054, 0.220229, 0.212086, 0.205643, 0.203870, 0.203096, 0.212712, 0.238144, 0.233597, 0.229538, 0.233540, 0.280371, 0.430438, 0.598766, 0.665566, 0.672105, 0.669123, 0.660755, 0.658209, 0.664826, 0.671116, 0.668808, 0.668629, 0.672122, 0.670452, 0.669677, 0.656399, 0.646246, 0.627593, 0.531924, 0.507311, 0.547205, 0.557234, 0.472306, 0.376083, 0.332687, 0.333440, 0.335219, 0.334198, 0.334294, 0.361164, 0.399706, 0.435394, 0.747864, 0.790380, 0.764338, 0.801790, 0.583572, 0.341276, 0.444596, 0.344227, 0.320745, 0.325356, 0.312831, 0.311211, 0.323138, 0.340783, 0.343599, 0.342782, 0.344445, 0.346468, 0.350614, 0.362841, 0.462824, 0.641711, 0.568806, 0.530780, 0.577639, 0.556298, 0.763708, 0.937881, 1.000000, 0.984190, 0.836346, 0.706335, 0.552652, 0.306661, 0.185644, 0.186545, 0.185896, 0.182893, 0.202085, 0.222298, 0.223929, 0.227716, 0.202075, 0.138939, 0.072005, 0.036122, 0.021849, 0.037968, 0.048800, 0.026814, 0.013089, 0.007073, 0.004768, 0.002978, 0.001482, 0.001117, 0.001154, 0.001214, 0.000878, 0.000628, 0.000616, 0.000590, 0.000481, 0.000434, 0.000334, 0.000287, 0.000249, 0.000260, 0.000202, 0.000149, 0.000118, 0.000124, 0.000108, 0.000073, 0.000042, 0.000019, 0.000012, 0.000008, 0.000006, 0.000006, 0.000009, 0.000008, 0.000008, 0.000010, 0.000010, 0.000009, 0.000009, 0.000006, 0.000005, 0.000004, 0.000004, 0.000004, 0.000004, 0.000003, 0.000002, 0.000001, 0.000000, 0.000000];
        
        console.log(data)
        let labels = [];
        let options;

        for (let i=0; i<data.prob.length; i++) {
          labels[i] = data.start + i*resolution;
        }

        data = {
          labels: labels,
          series: [data.prob]
        };
        
        options = {
          axisX: {
            labelInterpolationFnc: function(value, index) {
              console.log(value, index)
             return index % 50 === 0 ? value : null;
            }
          },
          showPoint: false,
          showArea: true,
        }

        new Chartist.Line('.ct-chart', data, options);

        $(".ct-chart").css("height", "600px")
      }

      var generate = function() {
        console.log(carbons)
        var type = 'data:application/octet-stream;base64, ';
        var text = `Options() {Resolution=${resolution};}; Sum("sum_function") { \n`;

        _.each(carbons.main, function(monCarbons, i) {
          _.each(monCarbons, function(carbon, t) {
            text += `R_Date("${carbon.name}", ${carbon.date}, ${carbon.s});\n`;
          })
        })

        text += '};';

        var base = btoa(text);
        var res = type + base;
        $('#test').attr('href', res);
        $('#test').show();

        drawDiagram({});
        
        // $.ajax({
        //   'dataType': 'json',
        //   'type': 'POST',
        //   'url': '/calibrate/',
        //   'contentType': 'application/json',
        //   'data': text,

        //   success: (data) => {
        //     console.log(data);
        //   },
        //   beforeSend: function(xhr) {
        //     xhr.setRequestHeader("Authorization", "Bearer " + localStorage.getItem('token'));
        //   }
        // });

      };

      var callGenerate = _.after(1, generate);

      var ids = _.map(data.monuments, function(obj) {return obj.id.toString()});
      carbons = model.getData(query, callGenerate, true, ids);
    }) 
  },
}))